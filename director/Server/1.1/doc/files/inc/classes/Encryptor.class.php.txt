<?php
/**
 * Class for crypto functions.
 * 
 * ### About
 *  
 * *	Filename : Encryptor.class.php
 * *	Create data : 2015-07-09
 * *	Version : 1.1
 *  
 * ### Description
 *  
 * This class is used to encrypt or decrypt the incoming and outgoing XML
 * messages. The used encryption algorithm is AES with a PKCS5 padding.
 *  
 * ### List of changes
 *  
 * *	2015-07-09 : Created file.
 * *	2015-07-24 : Preparing for package release.
 *  
 * ### License
 *  
 * Copyright (C) 2015  Pol Warnimont
 *  
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *  
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Pol Warnimont <pwarnimo@gmail.com>
 * @copyright 2015 Pol Warnimont
 * @license AGPLv3
 * @license http://www.gnu.org/licenses/agpl.html 
 */
class Encryptor {
	/**
	 *	Create the PKCS5 padding.
	 *		
	 *	This method is used to create the PKCS5 padding on the data which
	 *	should be encrypted.
	 *		
	 *	@param String $text Data which should be encrypted.
	 *	@param int $blocksize Blocksize of the current encryption mode.
	 *	@return String Returns the PKCS5 pad.
	 */
	private static function pkcs5_pad($text, $blocksize) { 
		$pad = $blocksize - (strlen($text) % $blocksize); 
		return $text . str_repeat(chr($pad), $pad); 
	}

	/**
	 *	Encrypt data.
	 *		
	 *	This function is used to encrypt the outgoing XML data string.
	 *		
	 *	@param String key Encryption key string.
	 *	@param String data Data which should be encrypted.
	 *	@return String Returns the encrypted XML data string.
	 */
	public static function encryptData($key, $data) {
		$size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB);
		$data = Encryptor::pkcs5_pad($data, $size); 
		$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_ECB, ''); 
		$iv = mcrypt_create_iv (mcrypt_enc_get_iv_size($td), MCRYPT_RAND); 
		mcrypt_generic_init($td, $key, $iv); 
		$encryptedData = mcrypt_generic($td, $data); 
		mcrypt_generic_deinit($td); 
		mcrypt_module_close($td);
		$encryptedData = base64_encode($encryptedData); 
		return $encryptedData;
	}

	/**
	 * Decrypt data.
	 *		
	 *	This function is used to decrypt the incoming XML data string.
	 *		
	 *	@param String key Encryption key string.
	 *	@param String data Data which should be decrypted.
	 *	@return String Returns the decrypted XML data string.
	 */
	public static function decryptData($key, $data) {
		$decryptedData= mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, base64_decode($data), MCRYPT_MODE_ECB);
		$dec_s = strlen($decryptedData);
		$padding = ord($decryptedData[$dec_s-1]);
		$decryptedData = substr($decryptedData, 0, -$padding);
		return $decryptedData;
	}
}

